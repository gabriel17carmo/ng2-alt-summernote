{"version":3,"file":"summernote.component.js","sourceRoot":"","sources":["summernote.component.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"../summernote.d.ts\" />\n\n//import * as $ from 'jquery'; // old code. doesn't work\ndeclare let $: any;\n\nimport {\n    Component,\n    ElementRef,\n    forwardRef,\n    Input,\n    Output,\n    EventEmitter,\n    OnDestroy,\n    OnInit\n} from '@angular/core';\n\nimport {\n    NG_VALUE_ACCESSOR,\n    ControlValueAccessor\n} from '@angular/forms';\n\nconst SUMMERNOTE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SummernoteComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'summernote',\n    template: '<div class=\"summernote\"></div>',\n    providers: [SUMMERNOTE_VALUE_ACCESSOR]\n})\nexport class SummernoteComponent implements OnInit, OnDestroy, ControlValueAccessor {\n    @Input()\n    set options(options: SummernoteOptions) {\n        this._options = options;\n        this.addCallbacks();\n        this.refreshOptions();\n    }\n\n    get options(): SummernoteOptions {\n        return this._options || {};\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        if (disabled != null) {\n            this._disabled = disabled;\n            $(this.element.nativeElement).find('.summernote').summernote(disabled ? 'disable' : 'enable');\n            this.refreshOptions();\n        }\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input() whitespaceEmpty = false;\n\n    private _empty;\n\n    @Output() emptyChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    get empty() {\n        return this._empty;\n    }\n    set empty(value: boolean) {\n        if (this._empty != value) {\n            this._empty = value;\n            this.emptyChange.emit(value);\n        }\n    }\n\n    @Output() textChange: EventEmitter<string> = new EventEmitter<string>();\n\n    private _disabled: boolean = false;\n\n    private _options: SummernoteOptions;\n\n    private onTouched = () => { };\n    private onChange: (value: string) => void = () => { };\n\n    constructor(private element: ElementRef) {\n\n    }\n    private _value: string;\n\n    set value(value: string) {\n        this._value = value;\n    }\n    get value(): string {\n        return this._value;\n    }\n\n    private refreshOptions() {\n        $(this.element.nativeElement).find('.summernote').summernote(this.options);\n        if (this.options.tooltip != undefined && !this.options.tooltip)\n            (<any>$(this.element.nativeElement).find('.note-editor button.note-btn')).tooltip('destroy');\n    }\n\n    private addCallbacks() {\n        this.options.callbacks = {\n            onChange: (contents, $editable) => {\n                this.refreshEmpty();\n                this.onChange(contents);\n            },\n            onBlur: () => {\n                this.onTouched();\n            }\n        };\n    }\n\n    private refreshEmpty() {\n        this.empty = <boolean>(<any>$(this.element.nativeElement).find('.summernote').summernote('isEmpty'));\n    }\n\n    ngOnInit() {\n        if (this.options == null) {\n            this.options = {};\n        }\n        this.refreshEmpty();\n    }\n\n    ngOnDestroy() {\n        $(this.element.nativeElement).find('.summernote').summernote('destroy');\n    }\n\n    writeValue(code: string) {\n        this.value = code;\n\n        $(this.element.nativeElement).find('.summernote').summernote('code', code);\n        this.refreshEmpty();\n    }\n\n    getCode(): string {\n        return $(this.element.nativeElement).find('.summernote').summernote('code');\n    }\n\n    registerOnChange(fn: any) {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n}\n"]}